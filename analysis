#!/bin/bash

# Ensure exactly one argument is provided
if [ $# -ne 1 ]; then
    echo "Usage: $0 <cleaned_file.tsv>" >&2
    exit 1
fi

input_file="$1"

# Validate the input file
if [ ! -f "$input_file" ]; then
    echo "Error: File '$input_file' not found." >&2
    exit 1
fi

# Extract the header row to dynamically identify the Mechanics and Domains columns
header_row=$(head -n 1 "$input_file")
IFS=$'\t' read -r -a headers <<< "$header_row"

# Identify the column numbers for Mechanics and Domains
mech_col=-1
dom_col=-1
for i in "${!headers[@]}"; do
    if [[ "${headers[$i]}" =~ [Mm]echanic ]]; then
        mech_col=$((i + 1))
    elif [[ "${headers[$i]}" =~ [Dd]omain ]]; then
        dom_col=$((i + 1))
    fi
done

# Exit if columns not found
if [ $mech_col -eq -1 ] || [ $dom_col -eq -1 ]; then
    echo "Error: Could not find Mechanics or Domains columns." >&2
    exit 1
fi

# Calculate most popular mechanics and domains
mechanics=$(cut -f$mech_col "$input_file" | grep -v '^$' | sed 's/, /,/g' | tr ',' '\n' | sort | uniq -c | sort -nr | head -n 1)
domains=$(cut -f$dom_col "$input_file" | grep -v '^$' | sed 's/, /,/g' | tr ',' '\n' | sort | uniq -c | sort -nr | head -n 1)

# Extract the most popular mechanics and domains
most_pop_mech=$(echo "$mechanics" | awk '{$1=""; print $0}' | sed 's/^ //')
most_pop_mech_count=$(echo "$mechanics" | awk '{print $1}')
most_pop_dom=$(echo "$domains" | awk '{$1=""; print $0}' | sed 's/^ //')
most_pop_dom_count=$(echo "$domains" | awk '{print $1}')

# Print the results for mechanics and domains
echo "The most popular game mechanics is $most_pop_mech found in $most_pop_mech_count games"
echo "The most game domain is $most_pop_dom found in $most_pop_dom_count games"

# Calculate correlations using awk
awk -F'\t' 'NR>1 && $3 ~ /^[0-9]+$/ && $9 ~ /^[0-9]+\.?[0-9]*$/ && $11 ~ /^[0-9]+\.?[0-9]*$/ {
    year_sum+=$3; year_sq_sum+=$3^2; rating_sum+=$9; rating_sq_sum+=$9^2; year_rating_sum+=$3*$9; n++;
    complexity_sum+=$11; complexity_sq_sum+=$11^2; rating_complexity_sum+=$11*$9;
} END {
    year_mean=year_sum/n; rating_mean=rating_sum/n; complexity_mean=complexity_sum/n;
    year_sd=sqrt(year_sq_sum/n - year_mean^2);
    rating_sd=sqrt(rating_sq_sum/n - rating_mean^2);
    complexity_sd=sqrt(complexity_sq_sum/n - complexity_mean^2);
    
    year_rating_corr=(year_rating_sum/n - year_mean*rating_mean) / (year_sd*rating_sd);
    complexity_rating_corr=(rating_complexity_sum/n - complexity_mean*rating_mean) / (complexity_sd*rating_sd);
    
    printf "The correlation between the year of publication and the average rating is %.3f\n", year_rating_corr;
    printf "The correlation between the complexity of a game and its average rating is %.3f\n", complexity_rating_corr;
}' "$input_file"
